# Import necessary modules
import os
import json

# Define the File System class
class FileSystem:
    # Constructor initializes the file system with a root directory
    def __init__(self):
        self.root = Directory('/')  # Root directory
        self.current_dir = self.root  # Current working directory

    # Create a new directory
    def mkdir(self, dirname):
        new_dir = Directory(dirname)
        self.current_dir.add_directory(new_dir)

    # Change the current working directory
    def cd(self, path):
        if path == '/':
            self.current_dir = self.root
        elif path.startswith('/'):
            self.current_dir = self.root.navigate_absolute(path)
        else:
            self.current_dir = self.current_dir.navigate_relative(path)

    # List the contents of a directory
    def ls(self, path='.'):
        if path.startswith('/'):
            target_dir = self.root.navigate_absolute(path)
        else:
            target_dir = self.current_dir.navigate_relative(path)

        return target_dir.list_contents()

    # Search for a specified pattern in a file
    def grep(self, filename, pattern):
        file_content = self.current_dir.find_file_content(filename)
        if file_content:
            lines = file_content.split('\n')
            result = [line for line in lines if pattern in line]
            return '\n'.join(result)
        else:
            return f"File '{filename}' not found."

    # Display the contents of a file
    def cat(self, filename):
        file_content = self.current_dir.find_file_content(filename)
        if file_content:
            return file_content
        else:
            return f"File '{filename}' not found."

    # Create a new empty file
    def touch(self, filename):
        new_file = File(filename)
        self.current_dir.add_file(new_file)

    # Write text to a file
    def echo(self, filename, content):
        file_to_edit = self.current_dir.find_file(filename)
        if file_to_edit:
            file_to_edit.write_content(content)
        else:
            return f"File '{filename}' not found."

    # Move a file or directory to another location
    def mv(self, source, destination):
        source_obj = self.current_dir.find_item(source)
        if source_obj:
            destination_obj = self.root.navigate_absolute(destination)
            if destination_obj and isinstance(destination_obj, Directory):
                destination_obj.add_item(source_obj)
                self.current_dir.remove_item(source)
            else:
                return f"Destination directory '{destination}' not found."
        else:
            return f"Source '{source}' not found."

    # Copy a file or directory to another location
    def cp(self, source, destination):
        source_obj = self.current_dir.find_item(source)
        if source_obj:
            destination_obj = self.root.navigate_absolute(destination)
            if destination_obj and isinstance(destination_obj, Directory):
                destination_obj.add_item(source_obj.copy())
            else:
                return f"Destination directory '{destination}' not found."
        else:
            return f"Source '{source}' not found."

    # Remove a file or directory
    def rm(self, item):
        item_obj = self.current_dir.find_item(item)
        if item_obj:
            self.current_dir.remove_item(item)
        else:
            return f"Item '{item}' not found."

    # Save the current state of the file system to a file
    def save_state(self, path):
        state = {
            'root': self.root.serialize(),
            'current_dir': self.current_dir.serialize()
        }
        with open(path, 'w') as file:
            json.dump(state, file)

    # Load a previously saved state of the file system from a file
    def load_state(self, path):
        with open(path, 'r') as file:
            state = json.load(file)
            self.root = Directory.deserialize(state['root'])
            self.current_dir = Directory.deserialize(state['current_dir'])

# Define the Directory class
class Directory:
    # Constructor initializes a directory with a name and an empty list for contents
    def __init__(self, name):
        self.name = name
        self.contents = []

    # Add a subdirectory to the current directory
    def add_directory(self, directory):
        self.contents.append(directory)

    # Add a file to the current directory
    def add_file(self, file):
        self.contents.append(file)

    # List the names of contents in the current directory
    def list_contents(self):
        return [item.name for item in self.contents]

    # Navigate to a relative path within the current directory
    def navigate_relative(self, path):
        if path == '..':
            return self.parent_directory() or self
        else:
            return self.find_directory(path)

    # Navigate to an absolute path from the root directory
    def navigate_absolute(self, path):
        current = self.root()
        for component in path.split('/'):
            if component == '':
                continue
            current = current.find_directory(component)
            if not current:
                return None
        return current

    # Find a subdirectory by name in the current directory
    def find_directory(self, name):
        for item in self.contents:
            if isinstance(item, Directory) and item.name == name:
                return item
        return None

    # Find a file by name in the current directory
    def find_file(self, name):
        for item in self.contents:
            if isinstance(item, File) and item.name == name:
                return item
        return None

    # Find an item (either directory or file) by name in the current directory
    def find_item(self, name):
        return self.find_file(name) or self.find_directory(name)

    # Remove an item (either directory or file) by name from the current directory
    def remove_item(self, name):
        item = self.find_item(name)
        if item:
            self.contents.remove(item)

    # Find the content of a file by name in the current directory
    def find_file_content(self, filename):
        file = self.find_file(filename)
        return file.read_content() if file else None

    # Serialize the current directory and its contents to a dictionary
    def serialize(self):
        return {
            'name': self.name,
            'contents': [item.serialize() for item in self.contents]
        }

    # Deserialize a directory from a dictionary representation
    @classmethod
    def deserialize(cls, data):
        directory = cls(data['name'])
        directory.contents = [deserialize_item(item) for item in data['contents']]
        return directory

    # Find the root directory of the file system
    def root(self):
        current = self
        while current.parent_directory():
            current = current.parent_directory()
        return current

    # Find the parent directory of the current directory
    def parent_directory(self):
        return next((item for item in self.contents if isinstance(item, Directory) and item.name == '..'), None)

# Define the File class
class File:
    # Constructor initializes a file with a name and an empty content
    def __init__(self, name):
        self.name = name
        self.content = ""

    # Read the content of the file
    def read_content(self):
        return self.content

    # Write content to the file
    def write_content(self, content
